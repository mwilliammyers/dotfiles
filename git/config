[user]
	name = William Myers
	email = mwilliammyers@gmail.com

[github]
	user = mwilliammyers


[credenital]
	; helper = ''
	helper = store

[core]
	pager = delta --dark || less

[commit]
	verbose = true
	; gpgsign = true

[push]
	default = simple
	followTags = true
	autoSetupRemote = true

[pull]
	rebase = merges

[merge]
	log = true

[rebase]
	instructionFormat = %s [%an]
	autoStash = true

[apply]
	whitespace = fix

[diff]
	renames = copies

[log]
	# override with `git log --no-abbrev-commit`
	abbrevCommit = true

[tag]
	sort = version:refname

[help]
	autocorrect = 1


[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]
	added = yellow
	changed = green bold
	untracked = cyan bold


[url "git@github.com:"]
	insteadOf = "gh:"
	; FIXME: git-lfs complains about overridden URLs for these
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
	; insteadOf = "https://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"

[url "git@github.com:mwilliammyers/"]
	insteadOf = "me@ssh"
	insteadOf = "me"

[url "git://github.com/mwilliammyers/"]
	insteadOf = "me@https"


[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true


# https://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig
[alias]
	gio = "!gi() { curl -sL https://www.gitignore.io/api/$@ ;}; gi"

	bc = log --grep='BREAKING CHANGE' --grep='!:'
	lbc = log --grep='BREAKING CHANGE' --grep='!:'
	breaking = log --grep='BREAKING CHANGE' --grep='!:'

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	log-today = log --pretty=format:'%h %s' --since=14hours

	# View the current working tree status using the short format
	s = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = git pull --recurse-submodules

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# List aliases
	aliases = config --get-regexp alias

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Merge GitHub pull request on top of the current branch or,
	# if a branch name is specified, on top of the specified branch
	mpr = "!f() { \
		declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
		declare branch=\"${2:-$currentBranch}\"; \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git checkout -B $branch && \
			git rebase $branch pr/$1 && \
			git checkout -B $branch && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"
	
	hs = log --pretty='%C(yellow)%h %C(cyan)%cd %Cblue%aN%C(auto)%d %Creset%s' --graph --date=short --date-order
	
	resolve-bulk = "!f() { \
        mode=$1; \
        if [ \"$mode\" = \"theirs\" ]; then \
            option=\"--theirs\"; \
        elif [ \"$mode\" = \"ours\" ]; then \
            option=\"--ours\"; \
        else \
            echo \"Error: Please specify 'theirs' or 'ours'.\" >&2; \
            echo \"Usage: git resolve-bulk [theirs|ours]\" >&2; \
            return 1; \
        fi; \
        \
        unmerged_files=$(git diff --name-only --diff-filter=U); \
        if [ -z \"$unmerged_files\" ]; then \
             echo \"No unmerged files found to resolve.\"; \
             return 0; \
        fi; \
        \
        failed_files=''; \
        processed_count=0; \
        echo \"$unmerged_files\" | while IFS= read -r file; do \
            printf \"Processing: '$file'...\"; \
            if git checkout \"$option\" -- \"$file\" && git add -- \"$file\"; then \
                echo \" OK\"; \
            else \
                echo \" FAILED\"; \
                failed_files=\"$failed_files$file\n\"; \
            fi; \
            processed_count=$((processed_count + 1)); \
        done; \
        \
        echo \"---\"; \
        if [ -z \"$failed_files\" ]; then \
            echo \"Successfully attempted to resolve $processed_count files using '$mode'.\"; \
            echo \"Please review changes with 'git status' and 'git diff --staged' before committing.\"; \
            return 0; \
        else \
            echo \"Warning: Failed to resolve the following files:\"; \
            echo \"$failed_files\"; \
            echo \"Please resolve them manually.\"; \
            echo \"Review other changes with 'git status' and 'git diff --staged'.\"; \
            return 1; \
        fi; \
    }; f \"$@\""


[includeIf "gitdir/i:~/Developer/telcoin/"]
	path = ~/Developer/telcoin/.gitconfig

[includeIf "gitdir/i:~/Developer/voxjar/"]
	path = ~/Developer/voxjar/.gitconfig
